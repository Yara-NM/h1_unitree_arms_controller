"""
plotting.py

This module provides visualization utilities for analyzing joint controller logs 
generated by the Unitree H1 robot control system. The main function `plot_joint_log`
reads a CSV log file and generates a grid of subplots for each specified joint. 
Each joint gets three plots showing:

- Actual vs. target joint position over time
- Joint velocity over time
- Estimated joint torque over time

These visualizations are useful for debugging, tuning control parameters, and 
validating the performance of position and torque control strategies.

Dependencies:
- matplotlib
- pandas
"""

import matplotlib.pyplot as plt
import pandas as pd , os
from datetime import datetime
import matplotlib
matplotlib.use("Agg")  # Use non-GUI backend for headless environments

# Define all G1 arm joints
H1_ARM_JOINTS = [
    "LeftShoulderPitch", "LeftShoulderRoll", "LeftShoulderYaw", "LeftElbow",
   
    "RightShoulderPitch", "RightShoulderRoll", "RightShoulderYaw", "RightElbow",

]

def plot_joint_log(csv_file, joint_names, results_dir=None):

    """
    Plots and saves joint log data from a CSV file.

    Each joint has three subplots:
    - Position (actual vs target)
    - Velocity
    - Torque

    The resulting SVG image is saved with a timestamped filename.
    """

    if results_dir is None:
        results_dir = results_dir = os.path.join(os.path.dirname(__file__), "results")
    os.makedirs(results_dir, exist_ok=True)

    df = pd.read_csv(csv_file)
    # Normalize time to start at 0 seconds
    df["time"] -= df["time"].iloc[0]    

    num_joints = len(joint_names)
    fig, axes = plt.subplots(num_joints, 3, figsize=(15, 4 * num_joints))
    if num_joints == 1:
        axes = axes.reshape(1, 3)

    print("[DEBUG] Plotting joints:", joint_names)

    for i, joint in enumerate(joint_names):

        t = df["time"]
        axes[i, 0].plot(t, df.get(f"{joint}_pos", []), label="pos")
        axes[i, 0].plot(t, df.get(f"{joint}_target", []), "--", label="target")
        if f"{joint}_step_target" in df.columns:
            axes[i, 0].plot(t, df[f"{joint}_step_target"], ":.", label="step_target")
        if f"{joint}_final_target" in df.columns:
            axes[i, 0].plot(t, df[f"{joint}_final_target"], "--", label="final_target")
        axes[i, 0].set_title(f"{joint} - Position")
        axes[i, 0].legend()

        axes[i, 1].plot(t, df.get(f"{joint}_vel", []))
        axes[i, 1].set_title(f"{joint} - Velocity")

        axes[i, 2].plot(t, df.get(f"{joint}_tau", []))
        axes[i, 2].set_title(f"{joint} - Torque")

        # axes[i, 3].plot(t, df.get(f"{joint}_pos", []), label="pos")
        # axes[i, 3].plot(t, df.get(f"{joint}_pos_raw", []), "--", label="pos_raw")
       
        # axes[i, 3].set_title(f"{joint} - Position vs raw")
        # axes[i, 3].legend()


    plt.tight_layout()

    # Generate timestamped filename
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename =  os.path.join(results_dir, f"joint_log_plot_{timestamp}.svg")
    plt.savefig(output_filename, format = 'svg')
    plt.close()

    print(f"[INFO] Plot saved to {output_filename}")


if __name__ == "__main__":

    file_path = "/home/isr_lab/h1/arms_controller/results/joint_log_20250723_045407.csv"
    plot_joint_log(file_path, H1_ARM_JOINTS)
